-----> How the Web Works and HTTP Requests/Responses

-> Goal: Develop back-end applications with Node.js

-> Key Concept: Understanding the fundamentals of how the web works behind the scenes is crucial for building web applications.

-> Request-Response Model: The basic process where:
    - A browser (client) sends a request to a server for data.
    - The server responds with the requested data (e.g., webpage).
    - This is known as client-server architecture.


-> Key Process When Accessing a Website or API:

1. Typing a URL: When you type a URL (e.g., google.com/maps) into the browser:
    - HTTP/HTTPS: Specifies the communication protocol (HTTP for standard, HTTPS for secure communication).
    - Domain Name (e.g., google.com): This is a user-friendly address, but not the actual server address.
    - Resource Path (e.g., /maps): Specifies the exact resource you want to access on the server.

2. DNS Resolution:

    - The domain name (e.g., google.com) is converted to an IP address using a DNS (Domain Name System) server.
    - Think of DNS as the "phone book" of the internet, mapping human-readable domain names to server IP addresses.

3. Connection Setup:
    - TCP Socket Connection is established between the browser and the server.
    - TCP (Transmission Control Protocol) and IP (Internet Protocol) are the foundational protocols that govern data transfer across the internet.


-> HTTP Requests:
    - HTTP (HyperText Transfer Protocol): The protocol used for communication between client and server.

    - Request Structure: An HTTP request has the following components:
        - Start Line:
            - HTTP Method (GET, POST, PUT, PATCH).
            - Request Target (e.g., /maps).
            - HTTP Version (usually HTTP/1.1).

        - Headers: Additional information (e.g., browser type, language).
        - Body: Contains data (used when sending data to the server, like form submissions).

    - HTTP Methods:

    - GET: Requesting data.
    - POST: Sending data to the server (e.g., form submissions).
    - PUT/PATCH: Modifying existing data.

-> HTTPS vs. HTTP:
    - HTTPS (HyperText Transfer Protocol Secure): The secure version of HTTP. It encrypts data using TLS or SSL protocols.
    - The logic of communication (requests and responses) is the same for both, but HTTPS ensures privacy and security during data transmission.

-> HTTP Responses:
    - Response Structure:
        - Start Line: Contains HTTP version, status code, and status message (e.g., 200 OK, 404 Not Found).
        - Headers: Information about the response (e.g., content type).
        - Body: Contains the actual data being returned (e.g., HTML, JSON).

    - Common HTTP Status Codes:
        - 200 OK: The request was successful.
        - 404 Not Found: The requested resource could not be found.

-> Request-Response Cycle:
    - Request Cycle:
        - When accessing a website, the browser requests the HTML of the page first.
        - The server responds with the HTML file.
        - The HTML file is scanned for additional assets like JavaScript, CSS, images, etc.
        - For each asset, a new HTTP request is made, and the process repeats for every file that needs to be loaded to render the page.

    - Simultaneous Requests:
        -Multiple requests and responses can occur at the same time to improve loading speed (e.g., loading multiple images and scripts simultaneously).

=============================================

------> An Overview of How the Web Works

1. Developer Tools Access:
    - The tutorial starts by guiding the user on how to access developer tools in Google Chrome (Mac: Cmd+Option+J, Windows: Ctrl+Shift+J or right-click and inspect).
    - The user is instructed to go to Udemy.com and open the developer tools, then navigate to the "Network" tab.

2. Disabling Cache:
    - It is recommended to disable the browser cache so that the page loads fresh, ensuring that the developer tools capture all the network activity.

3. Reloading the Page:
    - After reloading Udemy.com, the network tab displays all the resources being requested by the page, such as images, JavaScript, and CSS files.

4. Request and Response:
    - The video explains how to inspect the details of a request and its response.
        - The request to Udemy.com is a simple GET request with a 200 OK status code.
        - The response includes headers, cookies, and other metadata about the request.
    - Additional requests for resources like CSS files, images, and JavaScript files are shown.

5. Request Details:
    - When inspecting individual requests, the video demonstrates how to check the headers for things like compression (gzip) and cookies.
    - The "authority" refers to the domain (e.g., udemy.com), and the "path" refers to specific resource locations (e.g., a CSS file).

6. Navigating the Page:
    - The user is encouraged to click on various sections of the Udemy page (e.g., web development courses), which triggers new requests, each with its own path and response.

7. Previewing Responses:
    - In the network tab, the response of each request is shown, including previews of images and HTML content. The headers and cookies are also displayed for each response.

8. Overview of Cookies:
    - While cookies haven't been fully explained yet, the video provides an overview of where and how cookies are set in HTTP responses.


=============================================

------> HTTP in Action

-> Overview of Web Development: The web development process is divided into two main parts: front-end and back-end development.

-> Front-End Development:
    - Involves everything that happens in the web browser.
    - It's about designing and building the final user-facing website using HTML, CSS, and JavaScript.
    - Modern front-end development often includes tools like React, Angular, Redux, or GraphQL.
    - The combination of tools and technologies that a team chooses to use forms the front-end technology stack.

-> Back-End Development:
    - Deals with everything on the web server, which is invisible to the user.
    - The server stores website files and runs an HTTP server to handle requests and deliver responses to the browser.
    - Servers can either be static (serving only static files like HTML, CSS, etc.) or dynamic (capable of running applications and interacting with databases).
    - Back-end development often involves a database to store data such as user profiles, application data, or content for websites.
    - Examples of typical back-end tasks include handling logins, sending emails, processing payments, and interacting with databases.

-> Server Types:
    - Static servers serve static files.
    - Dynamic servers are capable of running applications and interacting with databases.

-> Database Usage:
    - Databases are crucial in dynamic web applications for storing data like users or application content.
    - Example back-end stack for this course includes NodeJS for the server and MongoDB as the database.

-> Full-Stack Development:
    - A full-stack developer works on both front-end and back-end development.
    - Full-stack developers are becoming rarer due to the increasing complexity of front-end development.

-> NodeJS Usage:
    - The course will focus on using NodeJS for back-end web development, not for hardware programming or IoT devices, though NodeJS can be used in those areas as well.


=============================================

------> Static vs Dynamic vs API

Static vs. Dynamic Websites:
    - Static websites: These are simple websites where a developer uploads the ready-to-be-served files (HTML, CSS, JavaScript, images) to a web server. The server sends these exact files to the browser when requested, with no server-side code or database involved.
    - Dynamic websites: These are built on the server each time a new request comes in. They involve databases and an application (like a Node.js app) that fetches data from the database and dynamically generates the requested page based on that data.
    - Server-side rendering: The process of generating the HTML, CSS, and JavaScript on the server side before sending it to the browser.
    - Example: A website like Twitter is dynamic because it changes based on user actions (logged-in vs logged-out) and real-time data (new tweets).

-> Web Applications:
    - Web applications are dynamic websites with additional functionality, such as user logins, profiles, searches, etc. They allow for interactive behavior and real-time data.

-> API-Powered Websites:
    - APIs allow websites to fetch data dynamically without having the server send the entire website (HTML, CSS, JS). Instead, the server sends JSON data, and the client-side assembles the website.
    - This shift from server-side to client-side rendering allows for more flexibility in how and where the data is used.
    - Client-side rendering: The front-end (client) assembles the webpage using data from APIs (commonly in formats like JSON).

-> Benefits of APIs:
    - APIs can be consumed not just by browsers but also by native mobile apps (iOS, Android) or desktop applications, making them more versatile.
    - With APIs, multiple platforms (web, mobile apps, etc.) can access and use the same data source, making it easier to scale across various types of devices.
    - Building an API: APIs provide a single data source that can be used by various platforms, as opposed to server-side rendered websites, which are typically limited to the browser.
    - Some businesses or teams create and sell APIs to third-party developers, allowing other companies to integrate their data or services into their own products.

-> Node.js for APIs:
    - Node.js is ideal for building APIs and dynamic server-side rendered websites. The course will focus on both API development and server-side rendering using Node.js.








